// GENERATED BY pnpm run generate:openapi
export default {
	openapi: "3.0.3",
	info: { title: "Witness API", version: "1.0.0" },
	servers: [{ url: "https://api.witness.co" }],
	paths: {
		"/_health": {
			get: {
				operationId: "_health",
				tags: ["utility"],
				parameters: [],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										ts: { type: "number" },
										date: { type: "string" },
										human: { type: "string" },
										ip: { type: "string" },
									},
									required: ["ts", "date", "human", "ip"],
									additionalProperties: false,
								},
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/getLatestCheckpoint": {
			get: {
				operationId: "getLatestCheckpoint",
				description: "Returns the latest onchain checkpoint.",
				tags: ["utility"],
				parameters: [
					{
						name: "chainId",
						in: "query",
						required: false,
						schema: { anyOf: [{ not: {} }, { type: "number" }], default: 8453 },
						description:
							"Optional chain ID of the checkpoint; defaults to 8453",
						example: 8453,
					},
				],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										txHash: {
											type: "string",
											description: "Transaction hash of the checkpoint.",
										},
										chainId: {
											type: "number",
											description: "Chain ID of the checkpoint.",
										},
										status: {
											type: "string",
											enum: ["pending", "included", "finalized"],
										},
										rootHash: {
											type: "string",
											description: "Root hash of the checkpoint.",
										},
										treeSize: {
											type: "string",
											description: "Tree size of the checkpoint.",
										},
										blockNumber: {
											type: "string",
											description: "Block number of the checkpoint.",
										},
										blockHash: {
											type: "string",
											description: "Block hash of the checkpoint.",
										},
										timestamp: {
											type: "string",
											description:
												"Timestamp of the checkpoint, expressed in epoch seconds.",
										},
									},
									required: [
										"txHash",
										"chainId",
										"status",
										"rootHash",
										"treeSize",
										"blockNumber",
										"blockHash",
										"timestamp",
									],
									additionalProperties: false,
								},
								example: {
									txHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									chainId: 8453,
									status: "included",
									rootHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									treeSize: "123456789",
									blockNumber: "123456789",
									blockHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									timestamp: "1698262805",
								},
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/getLatestCheckpointForAllChains": {
			get: {
				operationId: "getLatestCheckpointForAllChains",
				description: "Returns the latest onchain checkpoint for all chains.",
				tags: ["utility"],
				parameters: [],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									additionalProperties: {
										type: "object",
										properties: {
											txHash: {
												type: "string",
												description: "Transaction hash of the checkpoint.",
											},
											chainId: {
												type: "number",
												description: "Chain ID of the checkpoint.",
											},
											status: {
												type: "string",
												enum: ["pending", "included", "finalized"],
											},
											rootHash: {
												type: "string",
												description: "Root hash of the checkpoint.",
											},
											treeSize: {
												type: "string",
												description: "Tree size of the checkpoint.",
											},
											blockNumber: {
												type: "string",
												description: "Block number of the checkpoint.",
											},
											blockHash: {
												type: "string",
												description: "Block hash of the checkpoint.",
											},
											timestamp: {
												type: "string",
												description:
													"Timestamp of the checkpoint, expressed in epoch seconds.",
											},
										},
										required: [
											"txHash",
											"chainId",
											"status",
											"rootHash",
											"treeSize",
											"blockNumber",
											"blockHash",
											"timestamp",
										],
										additionalProperties: false,
									},
								},
								example: {
									"8453": {
										txHash:
											"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
										chainId: 8453,
										status: "included",
										rootHash:
											"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
										treeSize: "123456789",
										blockNumber: "123456789",
										blockHash:
											"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
										timestamp: "1698262805",
									},
								},
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/getEarliestCheckpointCoveringLeafIndex": {
			get: {
				operationId: "getEarliestCheckpointCoveringLeafIndex",
				description: "Get earliest checkpoint covering a specific leaf index.",
				tags: ["utility"],
				parameters: [
					{
						name: "leafIndex",
						in: "query",
						required: true,
						schema: { type: "string" },
						description: "Leaf index to query.",
						example: "1234",
					},
					{
						name: "chainId",
						in: "query",
						required: false,
						schema: { anyOf: [{ not: {} }, { type: "number" }], default: 8453 },
						description:
							"Optional chain ID of the checkpoint; defaults to 8453",
						example: 8453,
					},
				],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										txHash: {
											type: "string",
											description: "Transaction hash of the checkpoint.",
										},
										chainId: {
											type: "number",
											description: "Chain ID of the checkpoint.",
										},
										status: {
											type: "string",
											enum: ["pending", "included", "finalized"],
										},
										rootHash: {
											type: "string",
											description: "Root hash of the checkpoint.",
										},
										treeSize: {
											type: "string",
											description: "Tree size of the checkpoint.",
										},
										blockNumber: {
											type: "string",
											description: "Block number of the checkpoint.",
										},
										blockHash: {
											type: "string",
											description: "Block hash of the checkpoint.",
										},
										timestamp: {
											type: "string",
											description:
												"Timestamp of the checkpoint, expressed in epoch seconds.",
										},
									},
									required: [
										"txHash",
										"chainId",
										"status",
										"rootHash",
										"treeSize",
										"blockNumber",
										"blockHash",
										"timestamp",
									],
									additionalProperties: false,
								},
								example: {
									txHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									chainId: 8453,
									status: "included",
									rootHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									treeSize: "123456789",
									blockNumber: "123456789",
									blockHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									timestamp: "1698262805",
								},
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/getCheckpointByTransactionHash": {
			get: {
				operationId: "getCheckpointByTransactionHash",
				description: "Get a checkpoint by its transaction hash.",
				tags: ["utility"],
				parameters: [
					{
						name: "txHash",
						in: "query",
						required: true,
						schema: { type: "string" },
						description: "Transaction hash of the checkpoint.",
						example:
							"0x2cf28b31b91c4a50e3eb5093a4db60f3a41cd21568f304ff654eafdafc7e88ab",
					},
				],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										txHash: {
											type: "string",
											description: "Transaction hash of the checkpoint.",
										},
										chainId: {
											type: "number",
											description: "Chain ID of the checkpoint.",
										},
										status: {
											type: "string",
											enum: ["pending", "included", "finalized"],
										},
										rootHash: {
											type: "string",
											description: "Root hash of the checkpoint.",
										},
										treeSize: {
											type: "string",
											description: "Tree size of the checkpoint.",
										},
										blockNumber: {
											type: "string",
											description: "Block number of the checkpoint.",
										},
										blockHash: {
											type: "string",
											description: "Block hash of the checkpoint.",
										},
										timestamp: {
											type: "string",
											description:
												"Timestamp of the checkpoint, expressed in epoch seconds.",
										},
									},
									required: [
										"txHash",
										"chainId",
										"status",
										"rootHash",
										"treeSize",
										"blockNumber",
										"blockHash",
										"timestamp",
									],
									additionalProperties: false,
								},
								example: {
									txHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									chainId: 8453,
									status: "included",
									rootHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									treeSize: "123456789",
									blockNumber: "123456789",
									blockHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									timestamp: "1698262805",
								},
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/getLeafIndexByHash": {
			get: {
				operationId: "getLeafIndexByHash",
				tags: ["utility"],
				parameters: [
					{
						name: "leafHash",
						in: "query",
						required: true,
						schema: { type: "string" },
						description: "Leaf hash",
						example:
							"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
					},
				],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										leafIndex: { type: "string", description: "Leaf index" },
									},
									required: ["leafIndex"],
									additionalProperties: false,
								},
								example: { index: "123456789" },
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/getTimestampByLeafHash": {
			get: {
				operationId: "getTimestampByLeafHash",
				tags: ["core"],
				parameters: [
					{
						name: "chainId",
						in: "query",
						required: false,
						schema: { anyOf: [{ not: {} }, { type: "number" }], default: 8453 },
						description:
							"Optional chain ID of the checkpoint; defaults to 8453",
					},
					{
						name: "leafHash",
						in: "query",
						required: true,
						schema: { type: "string" },
						description: "Leaf hash",
						example:
							"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
					},
				],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										timestamp: {
											type: "string",
											description:
												"Timestamp of the earliest block the hash was included in, in epoch seconds",
										},
									},
									required: ["timestamp"],
									additionalProperties: false,
								},
								example: { timestamp: "123456789" },
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/getNodeHashById": {
			get: {
				operationId: "getNodeHashById",
				tags: ["utility"],
				parameters: [
					{
						name: "level",
						in: "query",
						required: true,
						schema: { type: "string" },
						description: "Node level",
						example: "123456789",
					},
					{
						name: "index",
						in: "query",
						required: true,
						schema: { type: "string" },
						description: "Node index",
						example: "123456789",
					},
				],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										nodeHash: { type: "string", description: "Node hash" },
									},
									required: ["nodeHash"],
									additionalProperties: false,
								},
								example: {
									nodeHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
								},
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/getProofForLeafHash": {
			get: {
				operationId: "getProofForLeafHash",
				description:
					"Returns the proof for the given leafHash. Supports an optional targetTreeSize parameter, which defaults to the latest checkpointed tree size.",
				tags: ["utility"],
				parameters: [
					{
						name: "leafHash",
						in: "query",
						required: true,
						schema: { type: "string" },
						description: "Leaf hash",
						example:
							"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
					},
					{
						name: "targetTreeSize",
						in: "query",
						required: false,
						schema: { type: "string" },
					},
					{
						name: "chainId",
						in: "query",
						required: false,
						schema: { anyOf: [{ not: {} }, { type: "number" }], default: 8453 },
						description:
							"Optional chain ID of the checkpoint; defaults to 8453",
						example: 8453,
					},
				],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										leftHashes: {
											type: "array",
											items: { type: "string" },
											description: "Left hashes of the proof",
										},
										rightHashes: {
											type: "array",
											items: { type: "string" },
											description: "Right hashes of the proof",
										},
										targetRootHash: {
											type: "string",
											description: "Target root hash for the proof",
										},
										leafHash: { type: "string", description: "Leaf hash" },
										leafIndex: { type: "string", description: "Leaf index" },
									},
									required: [
										"leftHashes",
										"rightHashes",
										"targetRootHash",
										"leafHash",
										"leafIndex",
									],
									additionalProperties: false,
									description:
										"Left, right, and target root information, comprising the proof for the given leaf hash.",
								},
								example: {
									leftHashes: [
										"0x913de129895fa1b0ebe41dae5230ef93ce3991a546ccc0b61fc77eedc94b7561",
										"0x71cecc95b857ccba01444c5544beea598a9429b012a8e9ae42fd89779dd20ca3",
									],
									rightHashes: [
										"0xcd3144dd8a4811f4d614b958eaede6f4767ca81be898d7db89748980d4aa6b4b",
										"0xd7e11a1efabac0f144ca21c774c7a47830eccd2ea310142e5193d2599ec044ee",
									],
									targetRootHash:
										"0x48c4282d0c69c8fd2ab1baee99ae06f758f55d710efd1902d955a02cb1deb3d6",
									leafHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									leafIndex: "123456789",
								},
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/postProof": {
			post: {
				operationId: "postVerifyProof",
				tags: ["utility"],
				requestBody: {
					required: true,
					content: {
						"application/json": {
							schema: {
								type: "object",
								properties: {
									leftHashes: {
										type: "array",
										items: { type: "string" },
										maxItems: 256,
										description: "Left hashes of the proof",
									},
									rightHashes: {
										type: "array",
										items: { type: "string" },
										maxItems: 256,
										description: "Right hashes of the proof",
									},
									targetRootHash: {
										type: "string",
										description: "Target root hash for the proof",
									},
									leafHash: { type: "string", description: "Leaf hash" },
									leafIndex: { type: "string", description: "Leaf index" },
								},
								required: ["targetRootHash", "leafHash", "leafIndex"],
								additionalProperties: false,
								description:
									"Left, right, and target root information, comprising the proof for the given leaf hash.",
							},
							example: {
								leftHashes: [
									"0x913de129895fa1b0ebe41dae5230ef93ce3991a546ccc0b61fc77eedc94b7561",
									"0x71cecc95b857ccba01444c5544beea598a9429b012a8e9ae42fd89779dd20ca3",
								],
								rightHashes: [
									"0xcd3144dd8a4811f4d614b958eaede6f4767ca81be898d7db89748980d4aa6b4b",
									"0xd7e11a1efabac0f144ca21c774c7a47830eccd2ea310142e5193d2599ec044ee",
								],
								targetRootHash:
									"0x48c4282d0c69c8fd2ab1baee99ae06f758f55d710efd1902d955a02cb1deb3d6",
								leafHash:
									"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
								leafIndex: "123456789",
							},
						},
					},
				},
				parameters: [],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										success: {
											type: "boolean",
											description: "Whether or not the proof is valid.",
										},
									},
									required: ["success"],
									additionalProperties: false,
								},
								example: { success: true },
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/getTreeState": {
			get: {
				operationId: "getTreeState",
				tags: ["utility"],
				parameters: [],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										leafCount: {
											type: "string",
											description: "Number of leaves in the tree",
										},
										merklizedRoot: {
											type: "string",
											description: "Merklized root hash of the tree",
										},
										merklizedLeafCount: {
											type: "string",
											description: "Merklized span end",
										},
										unmerklizedLeafCount: {
											type: "string",
											description:
												"Count of leaves that are inserted but not yet merklized.",
										},
										checkpointedRoot: {
											type: "string",
											description:
												"Root hash of the most recent onchain checkpoint",
										},
										checkpointedLeafCount: {
											type: "string",
											description:
												"Number of leaves entailed in the most recent onchain checkpoint",
										},
									},
									required: [
										"leafCount",
										"merklizedRoot",
										"merklizedLeafCount",
										"unmerklizedLeafCount",
										"checkpointedRoot",
										"checkpointedLeafCount",
									],
									additionalProperties: false,
								},
								example: {
									leafCount: "123456789",
									merklizedLeafCount: "123456789",
									unmerklizedLeafCount: "123456789",
									merklizedRoot:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									checkpointedRoot:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									checkpointedLeafCount: "123456789",
								},
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
		"/postLeafHash": {
			post: {
				operationId: "postLeafHash",
				tags: ["core"],
				security: [{ Authorization: [] }],
				requestBody: {
					required: true,
					content: {
						"application/json": {
							schema: {
								type: "object",
								properties: {
									leafHash: {
										type: "string",
										description: "The leaf hash to insert.",
									},
								},
								required: ["leafHash"],
								additionalProperties: false,
							},
							example: {
								leafHash:
									"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
							},
						},
					},
				},
				parameters: [],
				responses: {
					"200": {
						description: "Successful response",
						content: {
							"application/json": {
								schema: {
									type: "object",
									properties: {
										leafHash: {
											type: "string",
											description: "The inserted leaf hash",
										},
										leafIndex: {
											type: "string",
											description: "The index of the inserted leaf hash",
										},
									},
									required: ["leafHash", "leafIndex"],
									additionalProperties: false,
									description: "The inserted leaf hash and its index.",
								},
								example: {
									leafHash:
										"0x97e78047a64a1bb484d69e3093ec34d9a0d13f682496bffa492626909df5efd3",
									leafIndex: "123456789",
								},
							},
						},
					},
					default: { $ref: "#/components/responses/error" },
				},
			},
		},
	},
	components: {
		securitySchemes: { Authorization: { type: "http", scheme: "bearer" } },
		responses: {
			error: {
				description: "Error response",
				content: {
					"application/json": {
						schema: {
							type: "object",
							properties: {
								message: { type: "string" },
								code: { type: "string" },
								issues: {
									type: "array",
									items: {
										type: "object",
										properties: { message: { type: "string" } },
										required: ["message"],
										additionalProperties: false,
									},
								},
							},
							required: ["message", "code"],
							additionalProperties: false,
						},
					},
				},
			},
		},
	},
	tags: [{ name: "core" }, { name: "utility" }],
	externalDocs: { url: "https://docs.witness.co/" },
} as const;
